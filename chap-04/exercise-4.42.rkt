#lang racket

(require (only-in "../toolBox/LogicProgramming/logicPuzzle.rkt"
                  apply-constrains
                  all-combination))

(define nil `())

(define (Liars)
  (let ((Betty 0)
        (Ethel 1)
        (Joan  2)
        (Kitty 3)
        (Marry 4))
    (define (rank-index rank-list Name)
      (list-ref rank-list Name))
    (define one-to-five (list 1 2 3 4 5))
    
    (define constrain-list
      (list (lambda (rank-list)
              (xor (= (rank-index rank-list Kitty)
                      2)
                   (= (rank-index rank-list Betty)
                      3)))
            (lambda (rank-list)
              (xor (= (rank-index rank-list Ethel)
                      1)
                   (= (rank-index rank-list Joan)
                      2)))
            (lambda (rank-list)
              (xor (= (rank-index rank-list Kitty)
                      2)
                   (= (rank-index rank-list Marry)
                      4)))
            (lambda (rank-list)
              (xor (= (rank-index rank-list Marry)
                      4)
                   (= (rank-index rank-list Betty)
                      1)))))
    
    (map (lambda (x)
           (display "Betty: ")
           (display (rank-index x Betty))
           (newline)
           (display "Ethel: ")
           (display (rank-index x Ethel))
           (newline)
           (display "Joan:  ")
           (display (rank-index x Joan))
           (newline)
           (display "Kitty: ")
           (display (rank-index x Kitty))
           (newline)
           (display "Marry: ")
           (display (rank-index x Marry))
           (newline)
           (newline))
         (apply-constrains (all-combination one-to-five)
                           constrain-list))))

(Liars)